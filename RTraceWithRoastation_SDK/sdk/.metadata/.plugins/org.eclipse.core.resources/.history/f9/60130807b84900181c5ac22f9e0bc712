//
//  renderer.c
//  C-Ray
//
//  Created by Valtteri Koskivuori on 19/02/2017.
//  Copyright Â© 2017 Valtteri Koskivuori. All rights reserved.
//

#include "includes.h"
#include "renderer.h"
#include "camera.h"
#include "light.h"
#include "scene.h"
#include "raytrace.h"
#include "filehandler.h"
#include "main.h"

#include "xparameters.h"
#include "xscutimer.h"
#include <stdio.h>
#include "xil_types.h"
#include "xil_printf.h"


#define TIMER_DEVICE_ID XPAR_SCUTIMER_DEVICE_ID
// initial value to use for the SCU Private Timer's counter register
#define TIMER_LOAD_VALUE 0xFFFFFFFF
// PERIPHCLK, which is used by the Private Timer
u32 PERIPHCLK = XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2;
// Cortex A9 SCU Private Timer Instance
XScuTimer Timer;
float convert_to_seconds(u32 cycles, u8 prescaler) {
  // from Cortex A9 documentation
  return ((float)((prescaler+1)*cycles)) / PERIPHCLK;
}
/*
 * Global renderer
 */
struct renderer mainRenderer;


/**
 Gets the next tile from renderTiles in mainRenderer
 
 @return A renderTile to be rendered
 */
struct renderTile getTile() {
	struct renderTile tile;
	memset(&tile, 0, sizeof(tile));
	tile.tileNum = -1;
	if (mainRenderer.renderedTileCount < mainRenderer.tileCount) {
		tile = mainRenderer.renderTiles[mainRenderer.renderedTileCount];
		mainRenderer.renderTiles[mainRenderer.renderedTileCount].isRendering = true;
		tile.tileNum = mainRenderer.renderedTileCount++;
	}
	return tile;
}

/**
 Create tiles from render plane, and add those to mainRenderer
 
 @param scene scene object
 */
void quantizeImage() {
	printf("Quantizing render plane...\n");
	
	//Sanity check on tilesizes
	if (mainRenderer.tileWidth >= mainRenderer.image->size.width) mainRenderer.tileWidth = mainRenderer.image->size.width;
	if (mainRenderer.tileHeight >= mainRenderer.image->size.height) mainRenderer.tileHeight = mainRenderer.image->size.height;
	if (mainRenderer.tileWidth <= 0) mainRenderer.tileWidth = 1;
	if (mainRenderer.tileHeight <= 0) mainRenderer.tileHeight = 1;

	// we are just rendering the whole scene at once
	int tilesX = 1;
	int tilesY = 1;

	for (int y = 0; y < tilesY; y++) {
		for (int x = 0; x < tilesX; x++) {
			struct renderTile *tile = &mainRenderer.renderTiles[x + y*tilesX];
			tile->width  = mainRenderer.tileWidth;
			tile->height = mainRenderer.tileHeight;

			tile->startX = x       * mainRenderer.tileWidth;
			tile->endX   = (x + 1) * mainRenderer.tileWidth;

			tile->startY = y       * mainRenderer.tileHeight;
			tile->endY   = (y + 1) * mainRenderer.tileHeight;

			tile->endX = min((x + 1) * mainRenderer.tileWidth, mainRenderer.image->size.width);
			tile->endY = min((y + 1) * mainRenderer.tileHeight, mainRenderer.image->size.height);

			//Samples have to start at 1, so the running average works
			tile->completedSamples = 1;
			tile->isRendering = false;
			tile->tileNum = mainRenderer.tileCount;

			mainRenderer.tileCount++;
		}
	}
	printf("Quantized image into %i tiles. (%ix%i)", (tilesX*tilesY), tilesX, tilesY);
}

unsigned int rand_interval(unsigned int min, unsigned int max) {
	int r;
	const unsigned int range = 1 + max - min;
	const unsigned int buckets = RAND_MAX / range;
	const unsigned int limit = buckets * range;
	
	/* Create equal size buckets all in a row, then fire randomly towards
	 * the buckets until you land in one of them. All buckets are equally
	 * likely. If you land off the end of the line of buckets, try again. */
	do
	{
		r = rand();
	} while (r >= limit);
	
	return min + (r / buckets);
}

/**
 Gets a pixel from the render buffer
 
 @param x X coordinate of pixel
 @param y Y coordinate of pixel
 @return A color object, with full color precision intact (double)
 */
struct color getPixel(int x, int y) {
	struct color output = {0.0, 0.0, 0.0, 0.0};
	output.red = mainRenderer.renderBuffer[(x + (mainRenderer.image->size.height - y) * mainRenderer.image->size.width)*3 + 0];
	output.green = mainRenderer.renderBuffer[(x + (mainRenderer.image->size.height - y) * mainRenderer.image->size.width)*3 + 1];
	output.blue = mainRenderer.renderBuffer[(x + (mainRenderer.image->size.height - y) * mainRenderer.image->size.width)*3 + 2];
	output.alpha = 1.0;
	return output;
}

double renderThread() {
		/*
		// Timer Code
		int Status;
		double seconds;
		// used to store value of the SCU Private Timer's counter register
		u32 CntValue1;
		// pointer to SCU Private Timer configuration object
		XScuTimer_Config *ConfigPtr;

		// Find configuration
		ConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);

		// Initialize Timer
		Status = XScuTimer_CfgInitialize(&Timer, ConfigPtr, ConfigPtr->BaseAddr);
		if (Status != XST_SUCCESS) {
		xil_printf("Timer Init Failed!\r\n");
		}
		// Load the timer counter register with initial value
		XScuTimer_LoadTimer(&Timer, TIMER_LOAD_VALUE);
		u32 cycles = 0;
		// Set PRESCALER to 0 (i.e., decrement counter once every 1 cycles)
		u8 prescaler = 0;
		XScuTimer_SetPrescaler(&Timer, prescaler);
		double total_run_time = 0;
		double prev_run_time = 0;
		//End Timer Code
		 */

		struct lightRay incidentRay;
		//First time setup for each thread
		struct renderTile tile = getTile();
		

		while (tile.tileNum != -1) {
			printf("Starting tile %i, sample %d\n", tile.tileNum, tile.completedSamples);
			// XScuTimer_Start(&Timer);
			while (tile.completedSamples < mainRenderer.sampleCount+1 && mainRenderer.isRendering) {
				for (int y = tile.endY; y > tile.startY; y--) {
					// XScuTimer_RestartTimer(&Timer);
					for (int x = tile.startX; x < tile.endX; x++) {
						int height = mainRenderer.image->size.height;
						int width = mainRenderer.image->size.width;
						
						double fracX = (double)x;
						double fracY = (double)y;

						//A cheap 'antialiasing' of sorts. The more samples, the better this works
						if (mainRenderer.antialiasing) {
							fracX = getRandomDouble(fracX - 0.25, fracX + 0.25);
							fracY = getRandomDouble(fracY - 0.25, fracY + 0.25);
						}
						
						//Set up the light ray to be casted. direction is pointing towards the X,Y coordinate on the
						//imaginary plane in front of the origin. startPos is just the camera position.
						struct vector direction = {(fracX - 0.5 * width)
													/ mainRenderer.scene->camera->focalLength,
												   (fracY - 0.5 * height)
													/ mainRenderer.scene->camera->focalLength,
													1.0,
													false};
						
						//Normalize direction
						direction = normalizeVector(&direction);
						struct vector startPos = mainRenderer.scene->camera->pos;
						struct vector left = mainRenderer.scene->camera->left;
						struct vector up = mainRenderer.scene->camera->up;
						
						//Run camera tranforms on direction vector
						transformCameraView(mainRenderer.scene->camera, &direction);
						
						//Now handle aperture
						//FIXME: This is a 'square' aperture
						double aperture = mainRenderer.scene->camera->aperture;
						if (aperture <= 0.0) {
							incidentRay.start = startPos;
						} else {
							double randY = getRandomDouble(-aperture, aperture);
							double randX = getRandomDouble(-aperture, aperture);
							
							struct vector upTemp = vectorScale(randY, &up);
							struct vector temp = addVectors(&startPos, &upTemp);
							struct vector leftTemp = vectorScale(randX, &left);
							struct vector randomStart = addVectors(&temp, &leftTemp);
							
							incidentRay.start = randomStart;
						}
						
						incidentRay.direction = direction;
						incidentRay.rayType = rayTypeIncident;
						incidentRay.remainingInteractions = mainRenderer.scene->camera->bounces;
						incidentRay.currentMedium.IOR = AIR_IOR;
						
						//For multi-sample rendering, we keep a running average of color values for each pixel
						//The next block of code does this
						
						//Get previous color value from render buffer
						struct color output = getPixel(x, y);
						struct color sample = {0.0,0.0,0.0,0.0};
						
						//Get new sample (raytracing is initiated here)
						if (mainRenderer.newRenderer) {
							sample = newTrace(&incidentRay, mainRenderer.scene);
						} else {
							sample = rayTrace(&incidentRay, mainRenderer.scene);
						}
						
						//And process the running average
						output.red = output.red * (tile.completedSamples - 1);
						output.green = output.green * (tile.completedSamples - 1);
						output.blue = output.blue * (tile.completedSamples - 1);
						
						output = addColors(&output, &sample);
						
						output.red = output.red / tile.completedSamples;
						output.green = output.green / tile.completedSamples;
						output.blue = output.blue / tile.completedSamples;
						
						//Store render buffer
						mainRenderer.renderBuffer[(x + (height - y)*width)*3 + 0] = output.red;
						mainRenderer.renderBuffer[(x + (height - y)*width)*3 + 1] = output.green;
						mainRenderer.renderBuffer[(x + (height - y)*width)*3 + 2] = output.blue;
						
						//And store the image data
						//Note how imageData only stores 8-bit precision for each color channel.
						//This is why we use the renderBuffer for the running average as it just contains
						//the full precision color values
						mainRenderer.image->data[(x + (height - y)*width)*3 + 0] =
						(unsigned char)min( max(output.red*255.0,0), 255.0);
						mainRenderer.image->data[(x + (height - y)*width)*3 + 1] =
						(unsigned char)min( max(output.blue*255.0,0), 255.0);
						mainRenderer.image->data[(x + (height - y)*width)*3 + 2] =
						(unsigned char)min( max(output.green*255.0,0), 255.0);
					}
					/*
					CntValue1 = XScuTimer_GetCounterValue(&Timer);
					cycles = TIMER_LOAD_VALUE - CntValue1;
					seconds = convert_to_seconds(cycles, prescaler);
					total_run_time += seconds;
					*/
				}
				printf("sample %d done\n", tile.completedSamples);
				//printf("sample %d -> %f seconds\n",tile.completedSamples, total_run_time-prev_run_time);
				//prev_run_time = total_run_time;
				tile.completedSamples++;
			}
			//Tile has finished rendering, get a new one and start rendering it.
			mainRenderer.renderTiles[tile.tileNum].isRendering = false;
		}
		mainRenderer.isRendering = false;
		//return total_run_time;
		return 0;
}
