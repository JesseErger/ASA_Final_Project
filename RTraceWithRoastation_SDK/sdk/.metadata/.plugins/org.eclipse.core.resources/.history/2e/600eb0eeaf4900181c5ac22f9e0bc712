//
//  main.c
//
//
//  Created by Valtteri Koskivuori on 12/02/15.
//
//

#include "includes.h"
#include "main.h"

#include "camera.h"
#include "errorhandler.h"
#include "filehandler.h"
#include "renderer.h"
#include "scene.h"

#include "xparameters.h"
#include "xuartps.h"

#include "display_ctrl.h"
#include "timer_ps.h"
#include "intc.h"
#include "video_capture.h"

/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR 		XPAR_AXI_DYNCLK_0_BASEADDR
#define VDMA_ID 				XPAR_AXIVDMA_0_DEVICE_ID
#define HDMI_OUT_VTC_ID 		XPAR_V_TC_OUT_DEVICE_ID
#define HDMI_IN_VTC_ID 			XPAR_V_TC_IN_DEVICE_ID
#define HDMI_IN_GPIO_ID 		XPAR_AXI_GPIO_VIDEO_DEVICE_ID
#define HDMI_IN_VTC_IRPT_ID 	XPAR_FABRIC_V_TC_IN_IRQ_INTR
#define HDMI_IN_GPIO_IRPT_ID 	XPAR_FABRIC_AXI_GPIO_VIDEO_IP2INTC_IRPT_INTR
#define SCU_TIMER_ID 			XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR 			XPAR_PS7_UART_1_BASEADDR

/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display and Video Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;
VideoCapture videoCapt;
INTC intc;
char fRefresh; //flag used to trigger a refresh of the Menu on video detect

/*
 * Framebuffers for video data
 */
// u8 frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME_640480] __attribute__((aligned(0x20)));
// u8 *pFrames[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers

/*
 * Interrupt vector table
 */
const ivt_t ivt[] = {
	videoGpioIvt(HDMI_IN_GPIO_IRPT_ID, &videoCapt),
	videoVtcIvt(HDMI_IN_VTC_IRPT_ID, &(videoCapt.vtc))
};


#define DEMO_MAX_FRAME_640480_640480 (800*600*3)
#define DEMO_STRIDE_640480 (800 * 3)
/*
 * Configure the Video capture driver to start streaming on signal
 * detection
 */
#define DEMO_START_ON_DET 1

int getInput();
void freeMem();
void DemoISR(void *callBackRef, void *pVideo);
void InitializeVideo(u8* frameBuf);

extern struct renderer mainRenderer;

DisplayCtrl dispCtrl;
XAxiVdma vdma;
VideoCapture videoCapt;
INTC intc;
char fRefresh; //flag used to trigger a refresh of the Menu on video detect

void initRenderer(struct renderer *renderer) {
	renderer->renderBuffer = NULL;
	renderer->renderTiles = NULL;
	renderer->tileCount = 0;
	renderer->renderedTileCount = 0;
	renderer->mode = saveModeNormal;
	renderer->isRendering = false;
	//renderer->avgTileTime = (time_t)1;
	renderer->timeSampleCount = 1;
	renderer->scene = (struct world*)calloc(1, sizeof(struct world));
}

/**
Main entry point

@param argc Argument count
@param argv Arguments
@return Error codes, 0 if exited normally
*/
int main(int argc, char *argv[]) {
	printf("\nStarting C-ray renderer");
	//time_t start, stop;

	srand(1);

	//Initialize renderer
	initRenderer(&mainRenderer);

	//Build the scene
	switch (testBuild(&mainRenderer)) {
	case -1:
		logHandler(sceneBuildFailed);
		break;
	case -2:
		logHandler(sceneParseErrorMalloc);
		break;
	case 4:
		logHandler(sceneDebugEnabled);
		return 0;
		break;
	default:
		break;
	}
	//Quantize image into renderTiles
	quantizeImage();
	//Compute the focal length for the camera
	computeFocalLength(&mainRenderer);
	//This is a timer to elapse how long a render takes per frame
	//time(&start);

	//Verify sample count
	//if (mainRenderer.sampleCount < 1) logHandler(renderErrorInvalidSampleCount);
	if (!mainRenderer.scene->camera->areaLights) mainRenderer.sampleCount = 1;

	printf("\nStarting C-ray renderer for frame %i\n\n", mainRenderer.scene->camera->currentFrame);


	printf("Rendering at %i x %i\n", mainRenderer.image->size.width, mainRenderer.image->size.height);
	printf("Rendering with %i samples\n", mainRenderer.sampleCount);
	printf("Using %i light bounces\n", mainRenderer.scene->camera->bounces);
	printf("Raytracing...\n");

	//Allocate memory and create array of pixels for image data
	//unsigned char image_data_array [3 * mainRenderer.image->size.width * mainRenderer.image->size.height];
/*
	mainRenderer.image->data = (unsigned char *) DDR_BASE;

    mainRenderer.renderBuffer =(double *) DDR_BASE+(3 * mainRenderer.image->size.width * mainRenderer.image->size.height);
    */
	//Allocate memory and create array of pixels for image data
	mainRenderer.image->data = (unsigned char*)calloc(3 * mainRenderer.image->size.width * mainRenderer.image->size.height, sizeof(unsigned char));

	//Allocate memory for render buffer
	//Render buffer is used to store accurate color values for the renderers' internal use
	mainRenderer.renderBuffer = (double*)calloc(3 * mainRenderer.image->size.width * mainRenderer.image->size.height, sizeof(double));
	//Allocate memory for render UI buffer
	//This buffer is used for storing UI stuff like currently rendering tile highlights
	//mainRenderer.uiBuffer = (unsigned char*)calloc(4 * mainRenderer.image->size.width * mainRenderer.image->size.height, sizeof(unsigned char));

	InitializeVideo(mainRenderer.image->data);
	DisplayStart(&dispCtrl);

	while (true) {
		int status = getInput();

		if (status == 1) {
			//Main rendering loop
			mainRenderer.isRendering = true;
			double run_time = renderThread();
			// mainRenderer.isRendering = false;

			printf("Image Width -> %i\n",mainRenderer.image->size.width);
			printf("Image Height -> %i\n",mainRenderer.image->size.height);
			printf("Total run time -> %f\n", run_time);

			mainRenderer.scene->camera->currentFrame++;
		}
	}

	freeMem();

	printf("Render finished, exiting.\n");

	return 0;
}

int getInput() {
	char userInput = 0;

	/* Flush UART FIFO */
	while (XUartPs_IsReceiveData(UART_BASEADDR))
	{
		XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
	}

	while (userInput != 'q')
	{
		/* Wait for data on UART */
		while (!XUartPs_IsReceiveData(UART_BASEADDR) && !fRefresh)
		{}

		/* Store the first character in the UART receive FIFO and echo it */
		if (XUartPs_IsReceiveData(UART_BASEADDR))
		{
			userInput = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
			xil_printf("%c", userInput);
		}
		else  //Refresh triggered by video detect interrupt
		{
			userInput = 'r';
		}

		switch (userInput)
		{
		case 'a':
			mainRenderer.scene->camera->left.x -= 0.3;
			quantizeImage();
			computeFocalLength(&mainRenderer);
			return 1;
		case 'd':
			mainRenderer.scene->camera->left.x += 0.3;
			quantizeImage();
			computeFocalLength(&mainRenderer);
			return 1;
		case 'r':
			return 1;
		case 'q':
			break;
		default :
			xil_printf("\n\rInvalid Selection");
			TimerDelay(500000);
		}
	}

	return 0;
}


/**
Free dynamically allocated memory
*/
void freeMem() {
	//Free memory
	if (mainRenderer.image->data)
		free(mainRenderer.image->data);
	if (mainRenderer.renderThreadInfo)
		free(mainRenderer.renderThreadInfo);
	if (mainRenderer.renderBuffer)
		free(mainRenderer.renderBuffer);
	if (mainRenderer.scene->lights)
		free(mainRenderer.scene->lights);
	if (mainRenderer.scene->spheres)
		free(mainRenderer.scene->spheres);
	if (mainRenderer.scene->materials)
		free(mainRenderer.scene->materials);
	if (mainRenderer.renderTiles)
		free(mainRenderer.renderTiles);
	if (mainRenderer.scene)
		free(mainRenderer.scene);
	if (vertexArray)
		free(vertexArray);
	if (normalArray)
		free(normalArray);
	if (textureArray)
		free(textureArray);
}


/**
Sleep for a given amount of milliseconds

@param ms Milliseconds to sleep for
*/
void sleepMSec(int ms) {
#ifdef WINDOWS
	Sleep(ms);
#else
	usleep(ms * 1000);
#endif
}


void InitializeVideo(u8* frameBuf)
{
	int Status;
	XAxiVdma_Config *vdmaConfig;

	u8 *pFrames[1];
	pFrames[0] = frameBuf;

	/*
	 * Initialize a timer used for a simple delay
	 */
	TimerInitialize(SCU_TIMER_ID);

	/*
	 * Initialize VDMA driver
	 */
	vdmaConfig = XAxiVdma_LookupConfig(VDMA_ID);
	if (!vdmaConfig)
	{
		xil_printf("No video DMA found for ID %d\r\n", VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, HDMI_OUT_VTC_ID, DYNCLK_BASEADDR, pFrames, DEMO_STRIDE_640480);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Interrupt controller and start it.
	 */
	Status = fnInitInterruptController(&intc);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return;
	}
	fnEnableInterrupts(&intc, &ivt[0], sizeof(ivt)/sizeof(ivt[0]));

	/*
	 * Initialize the Video Capture device
	 */
	Status = VideoInitialize(&videoCapt, &intc, &vdma, HDMI_IN_GPIO_ID, HDMI_IN_VTC_ID, HDMI_IN_VTC_IRPT_ID, pFrames, DEMO_STRIDE_640480, DEMO_START_ON_DET);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Video Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}

	/*
	 * Set the Video Detect callback to trigger the menu to reset, displaying the new detected resolution
	 */
	VideoSetCallback(&videoCapt, DemoISR, &fRefresh);

	// DemoPrintTest(dispCtrl.framePtr[dispCtrl.curFrame], dispCtrl.vMode.width, dispCtrl.vMode.height, dispCtrl.stride, DEMO_PATTERN_1);

	return;
}

void DemoISR(void *callBackRef, void *pVideo)
{
	char *data = (char *) callBackRef;
	*data = 1; //set fRefresh to 1
}
